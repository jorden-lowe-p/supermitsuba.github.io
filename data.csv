What is the Quicksort Implementation?,"        public static void sort(int[] a){
            sortImpl(a, 0, a.Length-1);
        }

        public static void sortImpl(int[] a, int left, int right){
            var i = left;
            var j = right;
            var pivot = a[(left+right)/2];

            while(i <= j){
                while(a[i] < pivot){
                    i++;
                }

                while(a[j] > pivot){
                    j--;
                }

                if(i <= j){
                    swap(a, i, j);
                    i++; 
                    j--;
                }

                if(left < j){
                    sortImpl(a, left, j);
                }

                if(i < right){
                    sortImpl(a, i, right);
                }
            }
        }

        private static void swap(int[] array, int index1, int index2){
            var tmp = array[index1];
            array[index1] = array[index2];
            array[index2] = tmp;
        }"
What is the Mergesort Implementation?,"        public static void sort(int[] a){
            var aux = new int[a.Length];
            sort(a, aux, 0, a.Length-1);
        }

        private static void sort(int[] a, int[] aux, int lo, int hi){
            if(hi <= lo) return;
            int mid = lo + (hi-lo) /2;
            sort(a, aux, lo, mid);
            sort(a, aux, mid+1, hi);
            merge(a, aux, lo, mid, hi);
        }

        private static void merge(int[] a, int[] aux, int lo, int mid, int hi){
            for(var k = lo; k <= hi; k++){
                aux[k] = a[k];
            }

            int i = lo, j = mid +1;
            for(int k = lo; k<= hi; k++){
                if(i > mid)               a[k] = aux[j++];
                else if(j > hi)           a[k] = aux[i++];
                else if(aux[j] < aux[i])  a[k] = aux[j++];
                else                      a[k] = aux[i++];
            }
        }"
What is the Heap/Heapsort Implementation? ,"public class MyHeap {
        List<int> _data;

        public MyHeap(int[] data){
            _data = new List<int>();
            _data.AddRange( data);
            build_max_heap();
        }

        public int Count(){
            return _data.Count;
        }

        public int extract_max(){
            var result = this.max();
            swap(0, _data.Count-1);
            _data.RemoveAt(_data.Count-1);
            max_heapify(0);
            return result;
        }

        public int max(){
            if(_data == null || _data.Count == 0) throw new Exception(""not enough elements"");

            return _data[0];
        }

        public void Insert(int x){
            _data.Add(x);
            IncreasingKey(_data.Count-1, x);
        }

        private void IncreasingKey(int index, int v){
            _data[index] = v;

            while(index > 0 && _data[index/2] < _data[index]){
                swap(index, index/2);
                index = index/2;
            }
        }

        private void build_max_heap(){
            for(var i = _data.Count/2; i >= 0; i--){
                max_heapify(i);
            }
        }

        private void max_heapify(int index){
            var l = index*2;
            var r = index*2+1;
            var largest = index;
            if(l < _data.Count && _data[l] > _data[largest]) {
                largest = l;
            }
            
            if(r < _data.Count && _data[r] > _data[largest]){
                largest = r;
            }
            
            if(largest != index){
                swap(index, largest);
                max_heapify(largest);
            }
        }

        public void swap(int index1, int index2){
            var tmp = _data[index1];
            _data[index1] = _data[index2];
            _data[index2] = tmp;
        }
    }"
What is Quicksorts complexity?,"Best O(nlogn)
avg O(nlogn)
worst O(n^2)
space O(logn)"
Why use mergesort vs quicksort vs heapsort?,"Quicksort - it is done in place, unstable and log(n) memory, worst case O(n^2) time
Mergesort - time O(n log(n)), space O(n), and is stable
Heapsort - not stable, but time O(n log(n)) and space O(1). You also have to maintain a heap"
What is Mergesort complexity?,"Best O(nlogn)
avg O(nlogn)
worst O(n logn)
space O(1)"
What is the complexity of using an Array?,"Here is the averge and worst case

Access O(1)  O(1)
Search O(n)  O(n)
Insert O(n)  O(n)
Delete O(n)  O(n)"
What is the complexity of BTree operations?,"Here is the averge and worst case

Access O(log n)  O(log n)
Search O(log n)  O(log n)
Insert   O(log n)  O(log n)
Delete  O(log n)  O(log n)"
What is the complexity of Binary Search Tree?,"Here is the averge and worst case

Access O(log n)  O(n)
Search O(log n)  O(n)
Insert   O(log n)  O(ln)
Delete  O(log n)  O(n)"
What is the complexity of Hash table?,"Here is the averge and worst case

Access O(1)  O(n)
Search O(1)  O(n)
Insert   O(1)  O(n)
Delete  O(1)  O(n)"
What is the complexity of Linked List?,"Here is the averge and worst case

Access O(n)  O(n)
Search O(n)  O(n)
Insert   O(1)  O(1)
Delete  O(1)  O(1)"
What is the complexity of Queue?,"Here is the averge and worst case

Access O(n)  O(n)
Search O(n)  O(n)
Insert   O(1)  O(1)
Delete  O(1)  O(1)"
What is the complexity of Stack?,"Here is the averge and worst case

Access O(n)  O(n)
Search O(n)  O(n)
Insert   O(1)  O(1)
Delete  O(1)  O(1)"
What is the complexity from worst to best?  i.e O(1) is best and O(n!) is the worst,"1
log(n)
n
n log(n)
n^2
2^n
n!"
How to do Breathe-First Search?,"public bool BFS (T value) {
    if(this.value == value) return true;

    var queue = new Queue<T>();

    if(left != null) queue.Enqueue(left);
    if(right != null) queue.Enqueue(right);

    while(!queue.IsEmpty()) {
        var node = queue.Dequeue();

        if(node.value == value) { return true; }
        else {
            if(node.left != null) queue.Enqueue(node.left);
            if(node.right != null) queue.Enqueue(node.right);            
        }
    }

    return false;
}

"
How to do Depth-First Search?,"public bool DFS(Tree<T> value) {
    bool result = false;
    if(value == this.value) { return true; }
    else {
        result = DFS(this.left);
        result = DFS(this.right) || result;
    }
    return result;
}
"
How to do Binary Search?,"public int search(int[] array, int search) {
    return searchImpl(array, search, 0, array.Length-1);
}

public int searchImpl(int[] array, int search, int start, int end){
    int mid = (start+end)/2;
    if(array[mid] == search) { return mid; }
    else {
        if(end-start <= 1) {
            return -1;
        }

        if(search > array[mid]) {
            return searchImpl(array, search, mid+1, end);
        }
        else {
            return searchImpl(array, search, 0, mid-1);
        }
    }
}"
How to implement a Trie?,"class TrieNode {
    private final char value;
    private final HashMap<Character, TrieNode> children;
    
    public TrieNode(char v){
        value = v;
        children = new HashMap<>();
    }
    
    public char GetCharValue() {
        return value;
    }
    
    public TrieNode FindNode(char value) {
        if(children.containsKey(value)){
            return children.get(value);
        }
        else{
            return null;
        }
    }
    
    public void AddNode(char key, TrieNode newNode){
        if(!children.containsKey(key)) {
            children.put(key, newNode);
        }
    }
}

public class Trie {
    TrieNode root;
    
    public Trie(){
        root = new TrieNode(' ');
    }
    
    public void InsertWord(String word){
        TrieNode currentNode = root;
        int index = 0;
        
        do {
            if(currentNode.FindNode(word.charAt(index)) == null) {
                TrieNode childNode = new TrieNode(word.charAt(index));
                currentNode.AddNode(word.charAt(index), childNode);
                currentNode = childNode;
            }
            else {
                currentNode = currentNode.FindNode(word.charAt(index));
            }
            
            index++;
            
        }while(index < word.length());
        
    }
    
    public boolean getMatchingPrefix(String input)  {
        TrieNode currentNode = root;
        boolean result = true;
        
        for(int i =0; i < input.length(); i++) {
            currentNode = currentNode.FindNode(input.charAt(i));
            
            if(currentNode == null) return false;
        }
        
        return result;
    }  
}"
What is the Space of Adjacency list?,O(V+E)
Navigating a graph using BFS on an Adjacency List,"public class AdjList {

        public void BFS(string start, Dictionary<string, List<string>> list){
            var levels = new Dictionary<string, bool>();
            Console.WriteLine(""Start Node: {0}\nChildren Nodes: "", start);
            PrintList(list[start]);
            var queue = new Queue<string>();
            EnqueueChildren(queue, list[start], levels);

            while(queue.Count > 0){
                start = queue.Dequeue();
                EnqueueChildren(queue, list[start], levels);
                Console.WriteLine(""Start Node: {0}\nChildren Nodes: "", start);
                PrintList(list[start]);
            }
        }

        public void PrintList(List<string> list){
            foreach(var item in list){
                Console.WriteLine(""{0}\n"", item);
            }
        }

        public void EnqueueChildren(Queue<string> queue, List<string> list, Dictionary<string, bool> levels){
            foreach(var item in list){
                if(!levels.ContainsKey(item)){
                    levels[item] = true;
                    queue.Enqueue(item);
                }
            }
        }
    }"
How to create a hashtable?,"1. Call an objects GetHashCode()
2. next do a mod on this and the length of the array.
  * Ex: array length is 10 and the hash code is 11:  11 mod 10 = 1 bucket
3. in the bucket is a list, you want to cruise through the list comparing the hashcode, 11
4. if found, replace the objects
5. if not found, add a new object"
What is P?,P is the set of all decision problems which can be solved in polynomial time by a deterministic Turing machine.
What is NP?,"NP is the set of all decision problems (questions with a yes-or-no answer) for which the 'yes'-answers can be verified in polynomial time (O(nk) where n is the problem size, and k is a constant) by a deterministic Turing machine."
What is NP-complete?,A problem x that is in NP is also in NP-Complete if and only if every other problem in NP can be quickly (ie. in polynomial time) transformed into x.
NP-HARD?,NP-Hard are problems that are at least as hard as the hardest problems in NP.
Dijkstra's algorithm,"// Funtion that implements Dijkstra's single source shortest path algorithm
// for a graph represented using adjacency matrix representation
void dijkstra(int graph[V][V], int src)
{
     int dist[V];     // The output array.  dist[i] will hold the shortest
                      // distance from src to i
  
     bool sptSet[V]; // sptSet[i] will true if vertex i is included in shortest
                     // path tree or shortest distance from src to i is finalized
  
     // Initialize all distances as INFINITE and stpSet[] as false
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;
  
     // Distance of source vertex from itself is always 0
     dist[src] = 0;
  
     // Find shortest path for all vertices
     for (int count = 0; count < V-1; count++)
     {
       // Pick the minimum distance vertex from the set of vertices not
       // yet processed. u is always equal to src in first iteration.
       int u = minDistance(dist, sptSet);
  
       // Mark the picked vertex as processed
       sptSet[u] = true;
  
       // Update dist value of the adjacent vertices of the picked vertex.
       for (int v = 0; v < V; v++)
  
         // Update dist[v] only if is not in sptSet, there is an edge from 
         // u to v, and total weight of path from src to  v through u is 
         // smaller than current value of dist[v]
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }
  
     // print the constructed distance array
     printSolution(dist, V);
}"
Dijkstra's algorithm worst case run time,O( E + V log V )
Red-black tree implementation?,"using System;
using System.Collections.Generic;
using System.Diagnostics;

/// <summary>Implements a left-leaning red-black tree.</summary>
/// <remarks>
/// Based on the research paper ""Left-leaning Red-Black Trees""
/// by Robert Sedgewick. More information available at:
/// http://www.cs.princeton.edu/~rs/talks/LLRB/RedBlack.pdf
/// http://www.cs.princeton.edu/~rs/talks/LLRB/08Penn.pdf
/// </remarks>
/// <typeparam name=""TKey"">Type of keys.</typeparam>
/// <typeparam name=""TValue"">Type of values.</typeparam>
public class LeftLeaningRedBlackTree<TKey, TValue>
{
    /// <summary>Stores the key comparison function.</summary>
    private Comparison<TKey> _keyComparison;

    /// <summary>Stores the value comparison function.</summary>
    private Comparison<TValue> _valueComparison;

    /// <summary>Stores the root node of the tree.</summary>
    private Node _rootNode;

    /// <summary>Represents a node of the tree.</summary>
    /// <remarks>Using fields instead of properties drops execution time by about 40%.</remarks>
    [DebuggerDisplay(""Key={Key}, Value={Value}, Siblings={Siblings}"")]
    private class Node
    {
        /// <summary>Gets or sets the node's key.</summary>
        public TKey Key;

        /// <summary>Gets or sets the node's value.</summary>
        public TValue Value;

        /// <summary>Gets or sets the left node.</summary>
        public Node Left;

        /// <summary>Gets or sets the right node.</summary>
        public Node Right;

        /// <summary>Gets or sets the color of the node.</summary>
        public bool IsBlack;

        /// <summary>Gets or sets the number of ""siblings"" (nodes with the same key/value).</summary>
        public int Siblings;
    }

    /// <summary>Initializes a new instance of the LeftLeaningRedBlackTree class implementing a normal dictionary.</summary>
    /// <param name=""keyComparison"">The key comparison function.</param>
    public LeftLeaningRedBlackTree(Comparison<TKey> keyComparison)
    {
        if (null == keyComparison)
        {
            throw new ArgumentNullException(""keyComparison"");
        }
        _keyComparison = keyComparison;
    }

    /// <summary>Initializes a new instance of the LeftLeaningRedBlackTree class implementing an ordered multi-dictionary.</summary>
    /// <param name=""keyComparison"">The key comparison function.</param>
    /// <param name=""valueComparison"">The value comparison function.</param>
    public LeftLeaningRedBlackTree(Comparison<TKey> keyComparison, Comparison<TValue> valueComparison)
        : this(keyComparison)
    {
        if (null == valueComparison)
        {
            throw new ArgumentNullException(""valueComparison"");
        }
        _valueComparison = valueComparison;
    }

    /// <summary>Gets a value indicating whether the tree is acting as an ordered multi-dictionary.</summary>
    private bool IsMultiDictionary
    {
        get { return null != _valueComparison; }
    }

    /// <summary>Adds a key/value pair to the tree.</summary>
    /// <param name=""key"">Key to add.</param>
    /// <param name=""value"">Value to add.</param>
    public void Add(TKey key, TValue value)
    {
        _rootNode = Add(_rootNode, key, value);
        _rootNode.IsBlack = true;
        AssertInvariants();
    }

    /// <summary>Removes a key (and its associated value) from a normal (non-multi) dictionary.</summary>
    /// <param name=""key"">Key to remove.</param>
    /// <returns>True if key present and removed.</returns>
    public bool Remove(TKey key)
    {
        if (IsMultiDictionary)
        {
            throw new InvalidOperationException(""Remove is only supported when acting as a normal (non-multi) dictionary."");
        }
        return Remove(key, default(TValue));
    }

    /// <summary>Removes a key/value pair from the tree.</summary>
    /// <param name=""key"">Key to remove.</param>
    /// <param name=""value"">Value to remove.</param>
    /// <returns>True if key/value present and removed.</returns>
    public bool Remove(TKey key, TValue value)
    {
        int initialCount = Count;
        if (null != _rootNode)
        {
            _rootNode = Remove(_rootNode, key, value);
            if (null != _rootNode)
            {
                _rootNode.IsBlack = true;
            }
        }
        AssertInvariants();
        return initialCount != Count;
    }

    /// <summary>Removes all nodes in the tree.</summary>
    public void Clear()
    {
        _rootNode = null;
        Count = 0;
        AssertInvariants();
    }

    /// <summary>Gets a sorted list of keys in the tree.</summary>
    /// <returns>Sorted list of keys.</returns>
    public IEnumerable<TKey> GetKeys()
    {
        TKey lastKey = default(TKey);
        bool lastKeyValid = false;
        return Traverse(
            _rootNode,
            n => !lastKeyValid || !object.Equals(lastKey, n.Key),
            n =>
            {
                lastKey = n.Key;
                lastKeyValid = true;
                return lastKey;
            });
    }

    /// <summary>Gets the value associated with the specified key in a normal (non-multi) dictionary.</summary>
    /// <param name=""key"">Specified key.</param>
    /// <returns>Value associated with the specified key.</returns>
    public TValue GetValueForKey(TKey key)
    {
        if (IsMultiDictionary)
        {
            throw new InvalidOperationException(""GetValueForKey is only supported when acting as a normal (non-multi) dictionary."");
        }
        Node node = GetNodeForKey(key);
        if (null != node)
        {
            return node.Value;
        }
        else
        {
            throw new KeyNotFoundException();
        }
    }

    /// <summary>Gets a sequence of the values associated with the specified key.</summary>
    /// <param name=""key"">Specified key.</param>
    /// <returns>Sequence of values.</returns>
    public IEnumerable<TValue> GetValuesForKey(TKey key)
    {
        return Traverse(GetNodeForKey(key), n => 0 == _keyComparison(n.Key, key), n => n.Value);
    }

    /// <summary>Gets a sequence of all the values in the tree.</summary>
    /// <returns>Sequence of all values.</returns>
    public IEnumerable<TValue> GetValuesForAllKeys()
    {
        return Traverse(_rootNode, n => true, n => n.Value);
    }

    /// <summary>Gets the count of key/value pairs in the tree.</summary>
    public int Count { get; private set; }

    /// <summary>Gets the minimum key in the tree.</summary>
    public TKey MinimumKey
    {
        get { return GetExtreme(_rootNode, n => n.Left, n => n.Key); }
    }

    /// <summary>Gets the maximum key in the tree.</summary>
    public TKey MaximumKey
    {
        get { return GetExtreme(_rootNode, n => n.Right, n => n.Key); }
    }

    /// <summary>Returns true if the specified node is red.</summary>
    /// <param name=""node"">Specified node.</param>
    /// <returns>True if specified node is red.</returns>
    private static bool IsRed(Node node)
    {
        if (null == node)
        {
            // ""Virtual"" leaf nodes are always black
            return false;
        }
        return !node.IsBlack;
    }

    /// <summary>Adds the specified key/value pair below the specified root node.</summary>
    /// <param name=""node"">Specified node.</param>
    /// <param name=""key"">Key to add.</param>
    /// <param name=""value"">Value to add.</param>
    /// <returns>New root node.</returns>
    private Node Add(Node node, TKey key, TValue value)
    {
        if (null == node)
        {
            // Insert new node
            Count++;
            return new Node { Key = key, Value = value };
        }

        if (IsRed(node.Left) && IsRed(node.Right))
        {
            // Split node with two red children
            FlipColor(node);
        }

        // Find right place for new node
        int comparisonResult = KeyAndValueComparison(key, value, node.Key, node.Value);
        if (comparisonResult < 0)
        {
            node.Left = Add(node.Left, key, value);
        }
        else if (0 < comparisonResult)
        {
            node.Right = Add(node.Right, key, value);
        }
        else
        {
            if (IsMultiDictionary)
            {
                // Store the presence of a ""duplicate"" node
                node.Siblings++;
                Count++;
            }
            else
            {
                // Replace the value of the existing node
                node.Value = value;
            }
        }

        if (IsRed(node.Right))
        {
            // Rotate to prevent red node on right
            node = RotateLeft(node);
        }

        if (IsRed(node.Left) && IsRed(node.Left.Left))
        {
            // Rotate to prevent consecutive red nodes
            node = RotateRight(node);
        }

        return node;
    }

    /// <summary>Removes the specified key/value pair from below the specified node.</summary>
    /// <param name=""node"">Specified node.</param>
    /// <param name=""key"">Key to remove.</param>
    /// <param name=""value"">Value to remove.</param>
    /// <returns>True if key/value present and removed.</returns>
    private Node Remove(Node node, TKey key, TValue value)
    {
        int comparisonResult = KeyAndValueComparison(key, value, node.Key, node.Value);
        if (comparisonResult < 0)
        {
            // * Continue search if left is present
            if (null != node.Left)
            {
                if (!IsRed(node.Left) && !IsRed(node.Left.Left))
                {
                    // Move a red node over
                    node = MoveRedLeft(node);
                }

                // Remove from left
                node.Left = Remove(node.Left, key, value);
            }
        }
        else
        {
            if (IsRed(node.Left))
            {
                // Flip a 3 node or unbalance a 4 node
                node = RotateRight(node);
            }
            if ((0 == KeyAndValueComparison(key, value, node.Key, node.Value)) && (null == node.Right))
            {
                // Remove leaf node
                Debug.Assert(null == node.Left, ""About to remove an extra node."");
                Count--;
                if (0 < node.Siblings)
                {
                    // Record the removal of the ""duplicate"" node
                    Debug.Assert(IsMultiDictionary, ""Should not have siblings if tree is not a multi-dictionary."");
                    node.Siblings--;
                    return node;
                }
                else
                {
                    // Leaf node is gone
                    return null;
                }
            }
            // * Continue search if right is present
            if (null != node.Right)
            {
                if (!IsRed(node.Right) && !IsRed(node.Right.Left))
                {
                    // Move a red node over
                    node = MoveRedRight(node);
                }
                if (0 == KeyAndValueComparison(key, value, node.Key, node.Value))
                {
                    // Remove leaf node
                    Count--;
                    if (0 < node.Siblings)
                    {
                        // Record the removal of the ""duplicate"" node
                        Debug.Assert(IsMultiDictionary, ""Should not have siblings if tree is not a multi-dictionary."");
                        node.Siblings--;
                    }
                    else
                    {
                        // Find the smallest node on the right, swap, and remove it
                        Node m = GetExtreme(node.Right, n => n.Left, n => n);
                        node.Key = m.Key;
                        node.Value = m.Value;
                        node.Siblings = m.Siblings;
                        node.Right = DeleteMinimum(node.Right);
                    }
                }
                else
                {
                    // Remove from right
                    node.Right = Remove(node.Right, key, value);
                }
            }
        }

        // Maintain invariants
        return FixUp(node);
    }

    /// <summary>Flip the colors of the specified node and its direct children.</summary>
    /// <param name=""node"">Specified node.</param>
    private static void FlipColor(Node node)
    {
        node.IsBlack = !node.IsBlack;
        node.Left.IsBlack = !node.Left.IsBlack;
        node.Right.IsBlack = !node.Right.IsBlack;
    }

    /// <summary>Rotate the specified node ""left"".</summary>
    /// <param name=""node"">Specified node.</param>
    /// <returns>New root node.</returns>
    private static Node RotateLeft(Node node)
    {
        Node x = node.Right;
        node.Right = x.Left;
        x.Left = node;
        x.IsBlack = node.IsBlack;
        node.IsBlack = false;
        return x;
    }

    /// <summary>Rotate the specified node ""right"".</summary>
    /// <param name=""node"">Specified node.</param>
    /// <returns>New root node.</returns>
    private static Node RotateRight(Node node)
    {
        Node x = node.Left;
        node.Left = x.Right;
        x.Right = node;
        x.IsBlack = node.IsBlack;
        node.IsBlack = false;
        return x;
    }

    /// <summary>Moves a red node from the right child to the left child.</summary>
    /// <param name=""node"">Parent node.</param>
    /// <returns>New root node.</returns>
    private static Node MoveRedLeft(Node node)
    {
        FlipColor(node);
        if (IsRed(node.Right.Left))
        {
            node.Right = RotateRight(node.Right);
            node = RotateLeft(node);
            FlipColor(node);

            // * Avoid creating right-leaning nodes
            if (IsRed(node.Right.Right))
            {
                node.Right = RotateLeft(node.Right);
            }
        }
        return node;
    }

    /// <summary>Moves a red node from the left child to the right child.</summary>
    /// <param name=""node"">Parent node.</param>
    /// <returns>New root node.</returns>
    private static Node MoveRedRight(Node node)
    {
        FlipColor(node);
        if (IsRed(node.Left.Left))
        {
            node = RotateRight(node);
            FlipColor(node);
        }
        return node;
    }

    /// <summary>Deletes the minimum node under the specified node.</summary>
    /// <param name=""node"">Specified node.</param>
    /// <returns>New root node.</returns>
    private Node DeleteMinimum(Node node)
    {
        if (null == node.Left)
        {
            // Nothing to do
            return null;
        }

        if (!IsRed(node.Left) && !IsRed(node.Left.Left))
        {
            // Move red node left
            node = MoveRedLeft(node);
        }

        // Recursively delete
        node.Left = DeleteMinimum(node.Left);

        // Maintain invariants
        return FixUp(node);
    }

    /// <summary>Maintains invariants by adjusting the specified nodes children.</summary>
    /// <param name=""node"">Specified node.</param>
    /// <returns>New root node.</returns>
    private static Node FixUp(Node node)
    {
        if (IsRed(node.Right))
        {
            // Avoid right-leaning node
            node = RotateLeft(node);
        }

        if (IsRed(node.Left) && IsRed(node.Left.Left))
        {
            // Balance 4-node
            node = RotateRight(node);
        }

        if (IsRed(node.Left) && IsRed(node.Right))
        {
            // Push red up
            FlipColor(node);
        }

        // * Avoid leaving behind right-leaning nodes
        if ((null != node.Left) && IsRed(node.Left.Right) && !IsRed(node.Left.Left))
        {
            node.Left = RotateLeft(node.Left);
            if (IsRed(node.Left))
            {
                // Balance 4-node
                node = RotateRight(node);
            }
        }

        return node;
    }

    /// <summary>Gets the (first) node corresponding to the specified key.</summary>
    /// <param name=""key"">Key to search for.</param>
    /// <returns>Corresponding node or null if none found.</returns>
    private Node GetNodeForKey(TKey key)
    {
        // Initialize
        Node node = _rootNode;
        while (null != node)
        {
            // Compare keys and go left/right
            int comparisonResult = _keyComparison(key, node.Key);
            if (comparisonResult < 0)
            {
                node = node.Left;
            }
            else if (0 < comparisonResult)
            {
                node = node.Right;
            }
            else
            {
                // Match; return node
                return node;
            }
        }

        // No match found
        return null;
    }

    /// <summary>Gets an extreme (ex: minimum/maximum) value.</summary>
    /// <typeparam name=""T"">Type of value.</typeparam>
    /// <param name=""node"">Node to start from.</param>
    /// <param name=""successor"">Successor function.</param>
    /// <param name=""selector"">Selector function.</param>
    /// <returns>Extreme value.</returns>
    private static T GetExtreme<T>(Node node, Func<Node, Node> successor, Func<Node, T> selector)
    {
        // Initialize
        T extreme = default(T);
        Node current = node;
        while (null != current)
        {
            // Go to extreme
            extreme = selector(current);
            current = successor(current);
        }
        return extreme;
    }

    /// <summary>Traverses a subset of the sequence of nodes in order and selects the specified nodes.</summary>
    /// <typeparam name=""T"">Type of elements.</typeparam>
    /// <param name=""node"">Starting node.</param>
    /// <param name=""condition"">Condition method.</param>
    /// <param name=""selector"">Selector method.</param>
    /// <returns>Sequence of selected nodes.</returns>
    private IEnumerable<T> Traverse<T>(Node node, Func<Node, bool> condition, Func<Node, T> selector)
    {
        // Create a stack to avoid recursion
        Stack<Node> stack = new Stack<Node>();
        Node current = node;
        while (null != current)
        {
            if (null != current.Left)
            {
                // Save current state and go left
                stack.Push(current);
                current = current.Left;
            }
            else
            {
                do
                {
                    for (int i = 0; i <= current.Siblings; i++)
                    {
                        // Select current node if relevant
                        if (condition(current))
                        {
                            yield return selector(current);
                        }
                    }
                    // Go right - or up if nothing to the right
                    current = current.Right;
                }
                while ((null == current) &&
                       (0 < stack.Count) &&
                       (null != (current = stack.Pop())));
            }
        }
    }

    /// <summary>Compares the specified keys (primary) and values (secondary).</summary>
    /// <param name=""leftKey"">The left key.</param>
    /// <param name=""leftValue"">The left value.</param>
    /// <param name=""rightKey"">The right key.</param>
    /// <param name=""rightValue"">The right value.</param>
    /// <returns>CompareTo-style results: -1 if left is less, 0 if equal, and 1 if greater than right.</returns>
    private int KeyAndValueComparison(TKey leftKey, TValue leftValue, TKey rightKey, TValue rightValue)
    {
        // Compare keys
        int comparisonResult = _keyComparison(leftKey, rightKey);
        if ((0 == comparisonResult) && (null != _valueComparison))
        {
            // Keys match; compare values
            comparisonResult = _valueComparison(leftValue, rightValue);
        }
        return comparisonResult;
    }

    /// <summary>Asserts that tree invariants are not violated.</summary>
    [Conditional(""Debug"")]
    private void AssertInvariants()
    {
        // Root is black
        Debug.Assert((null == _rootNode) || _rootNode.IsBlack, ""Root is not black"");
        // Every path contains the same number of black nodes
        Dictionary<Node, Node> parents = new Dictionary<LeftLeaningRedBlackTree<TKey, TValue>.Node, LeftLeaningRedBlackTree<TKey, TValue>.Node>();
        foreach (Node node in Traverse(_rootNode, n => true, n => n))
        {
            if (null != node.Left)
            {
                parents[node.Left] = node;
            }
            if (null != node.Right)
            {
                parents[node.Right] = node;
            }
        }
        if (null != _rootNode)
        {
            parents[_rootNode] = null;
        }
        int treeCount = -1;
        foreach (Node node in Traverse(_rootNode, n => (null == n.Left) || (null == n.Right), n => n))
        {
            int pathCount = 0;
            Node current = node;
            while (null != current)
            {
                if (current.IsBlack)
                {
                    pathCount++;
                }
                current = parents[current];
            }
            Debug.Assert((-1 == treeCount) || (pathCount == treeCount), ""Not all paths have the same number of black nodes."");
            treeCount = pathCount;
        }
        // Verify node properties...
        foreach (Node node in Traverse(_rootNode, n => true, n => n))
        {
            // Left node is less
            if (null != node.Left)
            {
                Debug.Assert(0 > KeyAndValueComparison(node.Left.Key, node.Left.Value, node.Key, node.Value), ""Left node is greater than its parent."");
            }
            // Right node is greater
            if (null != node.Right)
            {
                Debug.Assert(0 < KeyAndValueComparison(node.Right.Key, node.Right.Value, node.Key, node.Value), ""Right node is less than its parent."");
            }
            // Both children of a red node are black
            Debug.Assert(!IsRed(node) || (!IsRed(node.Left) && !IsRed(node.Right)), ""Red node has a red child."");
            // Always left-leaning
            Debug.Assert(!IsRed(node.Right) || IsRed(node.Left), ""Node is not left-leaning."");
            // No consecutive reds (subset of previous rule)
            //Debug.Assert(!(IsRed(node) && IsRed(node.Left)));
        }
    }
}"
what is an n choose k problem?,"nchoosek(n, k)
{
    if(k==0) return 1;
    if(n==0) return 0;
    return nchoosek(n-1, k-1)+nchoosek(n-1,k);
}"
